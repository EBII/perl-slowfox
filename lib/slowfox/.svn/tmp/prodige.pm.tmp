package money30::prodige;
use Dancer ':syntax';
use Dancer::Plugin::Database;	#Connexion a la base de données Mysql
use DBI;			#Connexion a la base de données A SAV
use DateTime::Format::Strptime;	#Gestion des Date		
use Tie::IxHash;
use Dancer::Plugin::Ajax;
use Spreadsheet::ParseExcel;
use Spreadsheet::WriteExcel;
use Data::Dumper;
use Modern::Perl;




get '/prodige' => sub {
 
	
		my $count_client = database('asav')->quick_count('Client',{});
		my $count_not_bic = database('asav')->quick_count('Client', { CoteFinanciere => 'BON' , BIC => undef });	
		# my $workbook  = Spreadsheet::WriteExcel->new("public/Prodige.xls");
		# my $worksheet = $workbook->add_worksheet();
		# $worksheet->write(0, 0, "$count_client");
		# $worksheet->write(0, 1, "$count_not_bic");
		return template 'money30/prodige' => {(client=>$count_client,noBic=>$count_not_bic)};
				
#$workbook.close();
		
	
};



get '/prodige/Reporting' => sub {
	
#Pour le reporting il faudra comptabiliser le parc 
#combien d'appel par type de panne 
#compter d'envoi type code 910 
#parcourrir
	# my $panne = database('asav')->prepare('SELECT NumDossier, Panne, Action FROM asav.HotLineHistorique where
# NumDossier in (SELECT NumDossier FROM asav.DossierClos where CodeClient in ( SELECT CodeClient FROM asav.ClientContrat where 
# CategorieContrat="BNP5INGENICO" and CodeClient in (select CodeClient from Client where CategorieClient = \'BNPP\'))
# AND ( DossierClos.DateCloture >= "2013-11-01 00:00:01" AND DossierClos.DateCloture <= "2013-12-01 00:00:01")) order by Panne asc;');
			my $panne = database('asav')->prepare('SELECT NumDossier, Panne, Action FROM asav.HotLine;');
			$panne->execute();
			my $answer = $panne->fetchall_arrayref({});
			#print Data::Dumper->Dump($answer);
			#my @a =@{$answer};
			my @ListNumDossier;
			my %h_somme_call=();
			my %h_somme_envoi=();
			foreach my $h_call (@{$answer}){
				my $NumDossier 		=$h_call ->{NumDossier};
				my $Code_Panne 		=$h_call ->{Panne};
				my $Code_Action 	=$h_call ->{Action};
				#my $Memo_Action		=$h_call ->{MemoAction};
			if($Code_Panne){
			if ($NumDossier ~~ @ListNumDossier){
				#ne rien faire
				}else{
				
				$h_somme_call{$Code_Panne}++;
				
				if ($Code_Action and $Code_Action == 910 and $Code_Panne ){
					$h_somme_envoi{$Code_Panne}++;
					}
				push(@ListNumDossier, $NumDossier);
				
				}
			}
		}
			
			# ouvrir le fichier excel
			#ajouter deux colonnes là ou il faut 
			#copier coller le format des colonnes
			#lire les cellule A-6 / A-72 
			#ecrire dans les cellules C h_somme_call{valeur de la cellule si pas = ''}
			#ecrire dans les cellules C $h_somme_envoi{valeur de la cellule si pas = ''}
			my $parser   = Spreadsheet::ParseExcel->new();
			my $workbook = $parser->parse("public/NewReporting.xls")|| die ("Problem d'ouverture du fichier  $!");
			my $worksheet = $workbook->worksheet(0);
			$worksheet->write(0, 0,  'Hi Excel!');
			#my $worksheet->write_col();
			#my $worksheet->write_col(2);
			$workbook->close();
			print 1;
			# $worksheet->write(0, 0, '$count_client');
			# $worksheet->write(0, 1, 'code_fiche');
			# foreach my $key (keys(%h_somme_call)){
				# if ($key ){
				# print $key,"\t",$h_somme_call{$key},"\t";
				# if( exists( $h_somme_envoi{$key})){ 
					# print $h_somme_envoi{$key},"\n";
					# }else{
						# print "\n";
					# }
			# }
				# }
			
	};


get '/prodige/AnnulExpress' => sub {
	
		#SELECT NumDossier,Panne, MemoPanne,Action, MemoAction FROM asav.HotLineHistorique where NumDossier =777981 or NumDossier =778544
		
		my $count_client = 8;
		my $count_not_bic = 1;
		my @annulles = database('asav')->quick_select(
			'ClientContrat',
			{ DateAnnulation =>{ 'gt' => '2013-11-15 00:00:01' },Annulation => true},
			{ order_by => 'DateAnnulation', columns => [qw(CodeClient NumContrat TypeContrat Categoriecontrat DateEffet DateEcheance Annulation DateAnnulation MotifAnnulation)] }
		);	
		foreach my $var (@annulles){
				print $var->{CodeClient},"\n";
				print $var->{NumContrat},"\n";
				print $var->{DateAnnulation},"\n";
				                            
			}
};

get '/prodige/Annul0' => sub {
	
		my $count_DossiersClos = database('asav')->quick_count(
			'DossierClos',
			{DateCloture =>{ 'lt' => "2013-12-01 00:00:01"},DateCloture => { 'gt' => "2013-11-01 00:00:01"}});
				return $count_DossiersClos;
};
# fournis le nombre de dossier clos en novembre2013
get '/prodige/Annul' => sub {
	
		my $count_DossiersClos = database('asav')->quick_count(
			'DossierClos',
			{DateCloture => {
				ge => '2013-11-01 00:00:01',
				lt => '2013-12-01 00:00:01',
			}});
				return $count_DossiersClos;
		
};
# liste des codes clients
#SELECT CodeClient FROM asav.ClientContrat where 
#CategorieContrat="BNP5INGENICO" and CodeClient in (select CodeClient from Client where CategorieClient = 'BNPP')
#
#Recupere le parc complet 
#recupere les codes client. 
# filtre le parc par code client 
# comptabilise les types de materiel 
#

get '/parc' => sub {
		#Rechercher les infos dans la table ClientParc
		my ($CodeClient, $CodeArticle, $Specifique );
		my $sql = q/SELECT CodeClient, CodeArticle,Specifique FROM ClientParc/;
		my $sth = database('asav')->prepare($sql);
                   $sth->execute();
		my $answer = $sth->fetchall_arrayref({});
		my $clients=0;
		my %h_materiel;

			foreach my $h_call (@{$answer}){
				my $CodeClient 	 = $h_call ->{CodeClient};
				my $CodeArticle  = $h_call ->{CodeArticle};
				my $Specifique	 = $h_call ->{Specifique};
				$clients++;
				$h_materiel{$CodeArticle}++;
			}

		return template 'money30/Reporting' => {
						listesH	=> \%h_materiel,
						#show_success => "Ce Parc Comprend  $clients"		
		};
		# foreach my $k ( keys(%h_materiel)){
			# print "$k ==== $h_materiel{$k} \n";	
		# #print Data::Dumper->Dump({%h_materiel});
		# }	
		# print "nbre client = $clients\n";
	};

ajax '/code' => sub {
	my $code =8;
	if (! session 'ValueSession'){
		session 'ValueSession' => 8;
	}else{
		$code = session('ValueSession');
		#$code -=1;
		#session 'ValueSession' => $code;
	}
	my $rep;

	if ( $code == 0 ) {
		$rep = "onFerme";
	} else {
		$rep = $code;
	}
	#my $json = JSON->new->allow_nonref;
	#my $json_text   = $json->encode( $rep ); 	
	return { id => $rep};
};

ajax '/prodige/renduFile/:id' => sub {
	
	my $count_client  = database('asav')->quick_count('Client',{});
	my $count_not_bic = database('asav')->quick_count('Client', { CoteFinanciere => 'BON' , BIC => undef });
		sleep 12;
	my $workbook  = Spreadsheet::WriteExcel->new("../public/Prodige.xls");
	my $worksheet = $workbook->add_worksheet();
	   $worksheet->write(0, 0, '$count_client');
	   $worksheet->write(0, 1, 'code_fiche');
	
	$workbook->close();
	
	return send_file($workbook);
		
};
true;
