package money30::clients;
use utf8;
use Dancer ':syntax';
use Dancer::Plugin::Database;	#Connexion a la base de données Mysql
use Dancer::Plugin::Auth::RBAC;                         # Gestion des Access ( Role Base Access )
use Dancer::Plugin::Auth::RBAC::Credentials::MySQL;     # RBAC MySQL
use Dancer::Plugin::Auth::RBAC::Permissions::Config;


my $IP          = config->{'IP'};
my $ODBC        = config->{'ODBC'};
my $PORT        = config->{'PORT'};


get '/clients' => sub {
		return template 'money30/clients' => {
		};
       
	
};

get '/detailClient/:CodeClient' => sub {
				
		my $user = auth;
		my $CodeClient = params->{'CodeClient'};
		my ( @resultC, @resultCC, @resultCP , @resultCPre);
		my ( %h_PR, %h_statut);
		if ( ! $user->asa('user') ) { 
				return template 'money30/accueil' => {
						 show_warnig => "Désolé mais vous n'avez pas les droits pour consulter cette page - Merci de contacter l'adminstrateur."
				};
		}


		#Recherche des infos sur le client
		if ( $CodeClient ) {

			my ($h_PR, $h_statut )  = getDetailPrelevement($CodeClient);				
			 %h_PR                  = %$h_PR;         # on dé reférence le hash
			 %h_statut              = %$h_statut;     # on dé reférence le hash

			@resultC     = database('asav')->quick_select('Client', { CodeClient => $CodeClient }, { limit => 1 } );
			@resultCC    = database('asav')->quick_select('ClientContrat', { CodeClient => $CodeClient } , { order_by =>{ desc => 'DateRenouvellement'}  }  );
			@resultCP    = database('asav')->quick_select('ClientParcComplet', { CodeClient => $CodeClient }  );
			@resultCPre  = database('asav')->quick_select('ClientPrelevement', { CodeClient => $CodeClient }, { order_by =>{ desc => 'DatePrelevement'}  }  );

		

		
		} else {
			return template 'money30/accueil' => {
	                                          show_warnig => "Désolé mais vous n'avez pas les droits pour consulter cette page - Merci de contacter l'adminstrateur."
			};
		}

														 
		return template 'money30/detailClient' => {
						CodeClient   => $CodeClient,
						resultC      => \@resultC,
						resultCC     => \@resultCC,
						resultCP     => \@resultCP,
						resultCPre   => \@resultCPre,
						h_PR	     => \%h_PR,
						h_statut     => \%h_statut,			
						show_success => "Vous consultez le Client  N°  $CodeClient"		

		};
		
};






############################ SUB #####################################
sub getDetailPrelevement {
		my $CodeClient = shift;
		
		my %h_PR;
		my %h_statut;
	        my %h_statutF;

		my $sql = q/SELECT ID, IdPrelevement, IdPrelevementResent, NumContrat, IBAN, BIC, DatePrelevement, Montant, Statut, DetailStatut 
		            FROM ClientPrelevement WHERE CodeClient= ?/;
		my $sth = database('asav')->prepare($sql);
		$sth->execute($CodeClient);
		my $h_ref = $sth->fetchall_hashref('ID');

		#Parcours de l'objet $h_ref et construction du tableau des prélèvements relancés et obtenir le statut final ( OK ou pas )				
       
		foreach my $ID ( keys(%{$h_ref}) ) {
			$h_PR{ $ID }       = $ID;
			$h_statut{ $ID } = 'OK' if $h_ref->{$ID}->{Statut} =~/Sent/i;

			foreach my $IDD ( keys(%{$h_ref}) ) {
				if ( $h_ref->{$ID}->{IdPrelevementResent} && ($h_ref->{$ID}->{IdPrelevementResent} eq $h_ref->{$IDD}->{IdPrelevement}) ) {

			      		if ( $h_ref->{$IDD}->{IdPrelevementResent} ) {
						foreach my $IDDD ( keys (%{$h_ref}) ) { 
							if ( $h_ref->{$IDD}->{IdPrelevementResent} eq $h_ref->{$IDDD}->{IdPrelevement}) {
 								$h_PR{ $ID } = $IDDD;
							}
						}
					} else {
						$h_PR{ $ID } = $IDD;
	     				}
				}
			}
		}


		#Remise en ordre des tableaux et creation du h_PRF final
		#hash final %h_statutF
		#  54913 --> OK
		#  51277 --> OK
		
		foreach my $ID (keys %h_PR) {   
		        if ( $h_statut{$ID} && $h_statut{$ID} eq 'OK' ) { 	
					$h_statutF{ $h_PR{$ID} } = $h_statut{$ID};
			}	
		}


		return( \%h_PR, \%h_statutF );
}


true;
